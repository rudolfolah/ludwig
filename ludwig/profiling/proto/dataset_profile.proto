// To generate compiled proto code, run:
//   (if protoc not installed yet)
//   > sudo apt install protobuf-compiler
//
//   Regenerate generated code.
//   For python:
//   Generate
//   > protoc --proto_path=. --python_out=. \
//       ludwig/profiling/proto/whylogs_messages.proto ludwig/profiling/proto/dataset_profile.proto
//
//   In new python code, proto objects can be referenced like so:
//
//   > from ludwig.profiling import dataset_profile_pb2
//   > dataset_profile = dataset_profile_pb2.DatasetProfile()
//   > dataset_profile.num_examples = 10
//   > dataset_profile.SerializeToString())
//
// Read more on proto compilation: https://developers.google.com/protocol-buffers/docs/reference/python-generated
//
//   For go:
//   1. Install the go protocol buffers plugin (https://developers.google.com/protocol-buffers/docs/gotutorial)
//
//   > go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
//   > go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
//
//   2. Generate go code.
//   > protoc --go_out=. ludwig/profiling/proto/whylogs_messages.proto ludwig/profiling/proto/dataset_profile.proto
//   
//   3. Copy generated files to where go.mod is defined for these files.
//   mv github.com/ludwig-ai/ludwig/dataset_profile/* ludwig/profiling
//
//   New go code can use the proto objects like so:
//   > dataset_profile "github.com/ludwig-ai/ludwig/ludwig/profiling"
//   > p := &dataset_profile.DatasetProfile{}
// For protoc CLI help, check `man protoc`.

syntax = "proto3";

package dataset_profile;

import "ludwig/profiling/proto/whylogs_messages.proto";

option go_package = "github.com/ludwig-ai/ludwig/dataset_profile";


// Dataset profile represents a collection of in-memory profiling stats for a
// dataset. Used for recommending Ludwig configs and Ludwig data type inference.
message DatasetProfile {
  // When the profile was calculated.
  int64 timestamp = 1;

  // The number of examples in this dataset.
  int64 num_examples = 2;

  // The total size of this dataset in bytes.
  int64 size_bytes = 3;

  // Map of feature name to FeatureProfile.
  map<string, FeatureProfile> feature_profiles = 20;
}

// Feature profile represents a collection of in-memory profiling stats for a
// single feature column.
message FeatureProfile {
  // Whylogs metrics.
  // optional whylogs.ColumnMessage whylogs_metrics = 1;
  ColumnMessage whylogs_metrics = 1;

  // Any additional metrics that are not easily captured by whylogs's custom
  // metrics framework. I don't anticipate this being a real issue, but using
  // a sub-message gives us extra insurance for reimplementation and
  // customizability if it comes down to that.
}
